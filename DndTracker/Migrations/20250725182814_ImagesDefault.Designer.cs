// <auto-generated />
using System;
using DndTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725182814_ImagesDefault")]
    partial class ImagesDefault
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DndTracker.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DndTracker.Data.BlockPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<int?>("MaxHealth")
                        .HasColumnType("int")
                        .HasColumnName("max_health");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("display_name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("EncounterBlockPresets");
                });

            modelBuilder.Entity("DndTracker.Data.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("background_id");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("DndTracker.Data.EncounterBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockPresetId")
                        .HasColumnType("int")
                        .HasColumnName("preset_id");

                    b.Property<int?>("CurrentHealth")
                        .HasColumnType("int")
                        .HasColumnName("current_health");

                    b.Property<int?>("EncounterId")
                        .HasColumnType("int")
                        .HasColumnName("encounter_id");

                    b.Property<int?>("Initiative")
                        .HasColumnType("int")
                        .HasColumnName("initiative");

                    b.Property<int?>("TempHealth")
                        .HasColumnType("int")
                        .HasColumnName("temp_health");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("BlockPresetId");

                    b.HasIndex("EncounterId");

                    b.ToTable("EncounterBlocks");
                });

            modelBuilder.Entity("DndTracker.Data.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bytes = new byte[] { 255, 216, 255, 225, 0, 24, 69, 120, 105, 102, 0, 0, 73, 73, 42, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 236, 0, 17, 68, 117, 99, 107, 121, 0, 1, 0, 4, 0, 0, 0, 60, 0, 0, 255, 225, 3, 129, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 0, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 98, 101, 103, 105, 110, 61, 34, 239, 187, 191, 34, 32, 105, 100, 61, 34, 87, 53, 77, 48, 77, 112, 67, 101, 104, 105, 72, 122, 114, 101, 83, 122, 78, 84, 99, 122, 107, 99, 57, 100, 34, 63, 62, 32, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 65, 100, 111, 98, 101, 32, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 54, 45, 99, 49, 49, 49, 32, 55, 57, 46, 49, 53, 56, 51, 50, 53, 44, 32, 50, 48, 49, 53, 47, 48, 57, 47, 49, 48, 45, 48, 49, 58, 49, 48, 58, 50, 48, 32, 32, 32, 32, 32, 32, 32, 32, 34, 62, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 34, 32, 120, 109, 108, 110, 115, 58, 115, 116, 82, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 82, 101, 102, 35, 34, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 32, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 101, 48, 48, 52, 97, 51, 54, 99, 45, 52, 100, 50, 48, 45, 52, 52, 53, 101, 45, 97, 54, 102, 53, 45, 101, 100, 98, 49, 57, 55, 52, 56, 53, 99, 56, 54, 34, 32, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 50, 51, 50, 70, 55, 66, 56, 49, 67, 57, 67, 51, 49, 49, 69, 54, 56, 49, 68, 68, 70, 53, 54, 55, 55, 56, 67, 69, 56, 51, 49, 70, 34, 32, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 50, 51, 50, 70, 55, 66, 56, 48, 67, 57, 67, 51, 49, 49, 69, 54, 56, 49, 68, 68, 70, 53, 54, 55, 55, 56, 67, 69, 56, 51, 49, 70, 34, 32, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 61, 34, 65, 100, 111, 98, 101, 32, 80, 104, 111, 116, 111, 115, 104, 111, 112, 32, 67, 67, 32, 50, 48, 49, 53, 32, 40, 77, 97, 99, 105, 110, 116, 111, 115, 104, 41, 34, 62, 32, 60, 120, 109, 112, 77, 77, 58, 68, 101, 114, 105, 118, 101, 100, 70, 114, 111, 109, 32, 115, 116, 82, 101, 102, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 61, 34, 120, 109, 112, 46, 105, 105, 100, 58, 101, 48, 48, 52, 97, 51, 54, 99, 45, 52, 100, 50, 48, 45, 52, 52, 53, 101, 45, 97, 54, 102, 53, 45, 101, 100, 98, 49, 57, 55, 52, 56, 53, 99, 56, 54, 34, 32, 115, 116, 82, 101, 102, 58, 100, 111, 99, 117, 109, 101, 110, 116, 73, 68, 61, 34, 120, 109, 112, 46, 100, 105, 100, 58, 101, 48, 48, 52, 97, 51, 54, 99, 45, 52, 100, 50, 48, 45, 52, 52, 53, 101, 45, 97, 54, 102, 53, 45, 101, 100, 98, 49, 57, 55, 52, 56, 53, 99, 56, 54, 34, 47, 62, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 32, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 32, 60, 63, 120, 112, 97, 99, 107, 101, 116, 32, 101, 110, 100, 61, 34, 114, 34, 63, 62, 255, 238, 0, 14, 65, 100, 111, 98, 101, 0, 100, 192, 0, 0, 0, 1, 255, 219, 0, 132, 0, 6, 4, 4, 4, 5, 4, 6, 5, 5, 6, 9, 6, 5, 6, 9, 11, 8, 6, 6, 8, 11, 12, 10, 10, 11, 10, 10, 12, 16, 12, 12, 12, 12, 12, 12, 16, 12, 14, 15, 16, 15, 14, 12, 19, 19, 20, 20, 19, 19, 28, 27, 27, 27, 28, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, 7, 7, 7, 13, 12, 13, 24, 16, 16, 24, 26, 21, 17, 21, 26, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 255, 192, 0, 17, 8, 1, 144, 1, 144, 3, 1, 17, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 114, 0, 1, 0, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 5, 4, 6, 3, 7, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 2, 1, 2, 3, 5, 5, 6, 6, 3, 0, 0, 0, 0, 0, 0, 1, 2, 3, 17, 4, 33, 49, 5, 65, 81, 113, 18, 19, 97, 193, 34, 50, 82, 129, 145, 177, 209, 225, 35, 161, 66, 114, 146, 67, 52, 130, 83, 20, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 253, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 130, 192, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 5, 129, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 11, 2, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 22, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 44, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 88, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 176, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 96, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 38, 103, 72, 141, 102, 121, 64, 59, 246, 253, 35, 62, 77, 45, 150, 125, 58, 247, 115, 176, 52, 49, 116, 205, 158, 63, 228, 243, 207, 125, 184, 255, 0, 14, 64, 232, 174, 44, 117, 225, 90, 68, 120, 68, 64, 45, 49, 19, 206, 53, 7, 202, 251, 77, 182, 79, 155, 21, 103, 219, 166, 147, 247, 192, 56, 243, 244, 108, 86, 214, 112, 218, 105, 61, 211, 198, 63, 48, 102, 238, 54, 185, 240, 78, 153, 43, 164, 118, 90, 56, 196, 253, 160, 248, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 225, 195, 147, 54, 72, 199, 142, 53, 180, 131, 115, 103, 176, 197, 183, 141, 126, 108, 189, 183, 159, 112, 58, 128, 0, 0, 0, 4, 94, 149, 189, 102, 182, 136, 181, 103, 156, 72, 49, 183, 253, 50, 112, 235, 151, 22, 179, 139, 182, 189, 181, 253, 1, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 107, 91, 90, 209, 90, 198, 182, 153, 210, 35, 218, 15, 65, 177, 217, 215, 109, 139, 78, 121, 45, 243, 219, 220, 14, 128, 0, 0, 0, 0, 0, 0, 97, 245, 45, 151, 161, 147, 207, 72, 253, 171, 246, 119, 79, 112, 56, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 125, 27, 109, 22, 181, 179, 218, 56, 87, 225, 167, 143, 108, 131, 88, 0, 0, 0, 0, 0, 0, 0, 83, 62, 26, 230, 197, 108, 118, 229, 104, 231, 221, 61, 224, 243, 119, 165, 169, 123, 82, 220, 45, 89, 210, 126, 192, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 77, 166, 31, 75, 109, 142, 157, 177, 28, 124, 103, 140, 131, 234, 0, 0, 0, 0, 0, 0, 0, 0, 197, 235, 24, 124, 155, 152, 188, 114, 201, 28, 124, 99, 128, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 244, 193, 95, 62, 124, 117, 250, 173, 17, 247, 200, 61, 40, 0, 0, 0, 0, 0, 0, 0, 0, 12, 238, 183, 77, 112, 99, 183, 108, 91, 79, 190, 63, 64, 99, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 237, 178, 255, 0, 111, 15, 245, 199, 226, 15, 70, 0, 0, 0, 0, 0, 0, 0, 0, 3, 135, 172, 255, 0, 169, 31, 215, 31, 132, 131, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 130, 96, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 197, 127, 38, 90, 95, 233, 180, 79, 221, 58, 131, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 235, 119, 211, 22, 58, 119, 218, 103, 238, 141, 61, 224, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 152, 5, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 135, 97, 155, 213, 218, 210, 221, 177, 30, 91, 120, 192, 58, 0, 0, 0, 0, 0, 0, 0, 0, 24, 125, 91, 55, 169, 186, 154, 199, 44, 113, 229, 251, 121, 200, 56, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 38, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 127, 73, 221, 70, 44, 211, 138, 211, 240, 100, 229, 236, 183, 103, 222, 13, 160, 0, 0, 0, 0, 0, 0, 1, 241, 222, 110, 35, 111, 130, 217, 39, 230, 229, 72, 239, 153, 7, 157, 153, 153, 153, 153, 227, 51, 198, 100, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 48, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 233, 187, 232, 207, 72, 199, 121, 253, 234, 199, 247, 71, 120, 59, 64, 0, 0, 0, 0, 0, 69, 239, 90, 82, 111, 121, 210, 181, 227, 51, 32, 192, 223, 111, 45, 185, 203, 175, 44, 117, 225, 74, 251, 193, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 107, 107, 86, 209, 106, 206, 150, 142, 49, 48, 13, 141, 151, 85, 166, 72, 138, 103, 152, 173, 251, 45, 217, 63, 144, 52, 0, 0, 0, 0, 7, 207, 62, 231, 14, 10, 121, 178, 91, 78, 232, 237, 159, 8, 6, 38, 247, 127, 147, 115, 109, 62, 92, 81, 202, 158, 249, 7, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 163, 111, 191, 220, 224, 225, 91, 107, 79, 162, 220, 96, 26, 24, 186, 214, 25, 225, 150, 147, 89, 239, 142, 48, 14, 138, 245, 45, 149, 191, 203, 17, 227, 19, 30, 224, 90, 119, 251, 56, 255, 0, 45, 65, 242, 191, 86, 217, 215, 149, 166, 243, 236, 143, 207, 64, 113, 231, 235, 57, 173, 195, 21, 98, 145, 245, 79, 25, 7, 5, 242, 95, 37, 166, 215, 180, 218, 211, 219, 60, 65, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 130, 96, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 152, 5, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 21, 153, 157, 34, 53, 159, 96, 47, 27, 125, 196, 242, 197, 121, 255, 0, 140, 130, 127, 242, 238, 127, 234, 191, 246, 200, 41, 108, 89, 107, 243, 82, 209, 227, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 172, 29, 55, 119, 151, 143, 151, 201, 94, 251, 112, 254, 28, 193, 221, 139, 162, 225, 142, 57, 47, 55, 158, 232, 225, 0, 234, 199, 177, 218, 99, 249, 113, 87, 198, 99, 95, 196, 31, 120, 136, 136, 210, 35, 72, 238, 128, 0, 0, 20, 190, 28, 55, 249, 233, 91, 120, 196, 72, 57, 242, 116, 173, 157, 249, 86, 105, 61, 245, 159, 207, 80, 113, 230, 232, 185, 107, 199, 21, 226, 241, 221, 60, 36, 28, 25, 112, 101, 197, 111, 46, 74, 77, 103, 218, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 48, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 205, 175, 76, 207, 159, 75, 91, 246, 241, 253, 83, 206, 124, 32, 26, 219, 125, 142, 223, 7, 201, 93, 109, 245, 207, 25, 7, 220, 0, 0, 0, 0, 0, 0, 0, 69, 233, 75, 214, 107, 122, 197, 171, 60, 226, 120, 192, 51, 183, 61, 30, 150, 214, 216, 39, 203, 111, 162, 121, 3, 47, 46, 28, 152, 175, 52, 201, 89, 173, 163, 178, 65, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 130, 96, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 106, 99, 190, 75, 197, 41, 19, 107, 79, 40, 128, 108, 108, 186, 94, 60, 90, 95, 54, 151, 201, 221, 217, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 60, 248, 49, 102, 167, 147, 37, 117, 142, 206, 248, 240, 6, 46, 247, 167, 100, 219, 207, 154, 62, 60, 95, 87, 119, 136, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 130, 96, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 14, 28, 153, 178, 70, 60, 113, 173, 164, 27, 219, 61, 150, 61, 181, 56, 113, 201, 63, 53, 193, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 19, 19, 19, 26, 196, 243, 137, 6, 55, 81, 233, 179, 139, 92, 184, 99, 92, 127, 205, 95, 167, 244, 6, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 41, 107, 222, 41, 72, 214, 214, 157, 34, 1, 191, 178, 217, 211, 109, 143, 78, 121, 39, 231, 183, 184, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 19, 26, 79, 32, 98, 117, 45, 135, 161, 111, 83, 28, 126, 213, 167, 151, 211, 32, 225, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 152, 5, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 207, 74, 217, 250, 116, 245, 175, 31, 185, 120, 248, 99, 186, 63, 80, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 210, 183, 164, 210, 241, 173, 109, 26, 76, 3, 206, 238, 246, 214, 219, 230, 154, 79, 26, 243, 172, 247, 192, 62, 32, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 190, 157, 181, 245, 243, 199, 154, 63, 110, 156, 109, 237, 238, 128, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 94, 163, 181, 245, 240, 78, 145, 251, 148, 227, 79, 124, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 152, 5, 64, 0, 0, 0, 0, 0, 0, 0, 0, 1, 232, 58, 126, 223, 208, 219, 86, 38, 62, 59, 124, 87, 241, 144, 116, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 122, 158, 223, 209, 220, 204, 196, 124, 25, 62, 40, 241, 237, 128, 114, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 3, 163, 97, 131, 214, 221, 82, 179, 242, 199, 197, 111, 8, 7, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 199, 213, 112, 250, 155, 89, 180, 124, 216, 254, 40, 240, 237, 6, 16, 0, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 53, 122, 38, 46, 25, 50, 207, 110, 149, 143, 198, 65, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 45, 88, 181, 102, 179, 202, 209, 164, 253, 160, 243, 57, 41, 52, 201, 106, 79, 58, 204, 196, 253, 128, 168, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 13, 254, 153, 79, 38, 203, 31, 125, 181, 180, 253, 178, 14, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 117, 74, 121, 55, 183, 238, 182, 150, 143, 182, 1, 202, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 3, 211, 109, 235, 229, 193, 142, 189, 213, 136, 254, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 250, 213, 116, 207, 142, 221, 245, 211, 238, 159, 212, 25, 192, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 61, 76, 70, 145, 17, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 186, 228, 113, 195, 63, 213, 238, 6, 88, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 48, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 48, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 76, 2, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 19, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 192, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 2, 1, 48, 9, 0, 0, 0, 5, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 8, 7, 255, 217 },
                            Name = "no-profile.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DndTracker.Data.BlockPreset", b =>
                {
                    b.HasOne("DndTracker.Data.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DndTracker.Data.Encounter", b =>
                {
                    b.HasOne("DndTracker.Data.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DndTracker.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndTracker.Data.EncounterBlock", b =>
                {
                    b.HasOne("DndTracker.Data.BlockPreset", "BlockPreset")
                        .WithMany()
                        .HasForeignKey("BlockPresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTracker.Data.Encounter", "Encounter")
                        .WithMany("EncounterBlocks")
                        .HasForeignKey("EncounterId");

                    b.Navigation("BlockPreset");

                    b.Navigation("Encounter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DndTracker.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DndTracker.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTracker.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DndTracker.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTracker.Data.Encounter", b =>
                {
                    b.Navigation("EncounterBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
