@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<label class="form-label">Upload an Image</label>
<InputFile OnChange="LoadFiles" accept=".png,.jpg,.jpeg,.gif" class="form-control" />
@if (!String.IsNullOrEmpty(Message))
{
	<span class="text-muted">@Message</span>
}
@if (AllowUpload)
{
	<button class="btn btn-primary float-end" @onclick="UploadFile">Upload</button>
}
else 
{
	<button class="btn btn-primary float-end" disabled>Upload</button>
}


@code {
    [Parameter]
    public EventCallback<Image> OnUpload { get; set; } = default!;

    private IBrowserFile? file;
    private ApplicationDbContext? Context { get; set; }

    private string? Message { get; set; }
    private bool AllowUpload { get; set; } = false;

    public async Task<Image?> UploadFile()
    {
        // Stop if the file doesnt exist
        if (file is null)
        {
            return null;
        }

        // Generate a new block image
        Image image = new();

        Message = "Uploading...";

        // Set the values of the image to the block image object
        // Opens a memory steam and file stream to read the bytes
        try
        {
            image.Name = file.Name;

            MemoryStream memoryStream = new();
            Stream stream = file.OpenReadStream(1000000 * 5);

            await stream.CopyToAsync(memoryStream);

            stream.Close();
            stream.Dispose();

            image.Bytes = memoryStream.ToArray();

            memoryStream.Close();
            memoryStream.Dispose();
        }
        catch (IOException ex)
        {
            Console.WriteLine("Error: Read Stream to large. \n" + ex.Message);
            Message = "File is to large to upload.";
            return null;
        }

        // Store the image in the database
        Context = DbFactory.CreateDbContext();
        Context.Images.Add(image);
        Context.SaveChanges();
        Context.Dispose();

        Message = "Uploaded!";
        await OnUpload.InvokeAsync(image);
        return image;
    }

    public void Dispose()
    {
        if(Context is not null)
            Context.Dispose();
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
		// If file is the right size upload otherwise
		// cancel the file upload
		if (e.File.Size <= 1000000 * 5)
		{
			file = e.File;
			AllowUpload = true;
			Message = null;
		}
		else
		{
			file = null;
			AllowUpload = false;
			Message = "File is to large to upload.";
		}
	}
}
